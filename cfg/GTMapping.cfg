#!/usr/bin/env python
PACKAGE = "plane_slam"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

factorization_method_enum = gen.enum([gen.const("CHOLESKY", int_t, 0, "CHOLESKY factorization"),
                           gen.const("QR", int_t, 1, "QR factorization") ],
                        "An enum to factorization method")

##
gen.add("isam2_relinearize_threshold", double_t, 0, "", 0.04, 0.001, 0.5)
gen.add("isam2_relinearize_skip", int_t, 0, "", 1, 1, 10)
gen.add("isam2_factorization", int_t, 0, "", 1, edit_method=factorization_method_enum)
##
gen.add("throttle_memory", bool_t, 0, "", True)
gen.add("use_keyframe", bool_t, 0, "", True)
gen.add("initialize_with_floor", bool_t, 0, "", True)
gen.add("keyframe_linear_threshold", double_t, 0, "", 0.05, 0.001, 0.5)
gen.add("keyframe_angular_threshold", double_t, 0, "", 5.0, 0.001, 45)
##
gen.add("plane_observation_sigmas", str_t, 0, "", "0.0001, 0.0001, 0.005" )
gen.add("odom_sigmas", str_t, 0, "", "0.001, 0.001, 0.001, 0.001, 0.001, 0.001" )
gen.add("odom_sigmas_factor", str_t, 0, "", "0.4, 0.4, 0.4, 0.4, 0.4, 0.4" )
##
gen.add("min_keypoint_correspondences", int_t, 0, "", 1, 1, 50)
gen.add("keypoint_match_search_radius", double_t, 0, "In pixel", 10.0, 2.0, 20.0)
gen.add("keypoint_match_max_mahal_distance", double_t, 0, "", 5.0, 0.1, 50)
gen.add("keypoint_match_hamming_threshold", int_t, 0, "", 128, 32, 255)
#
gen.add("keypoint_initialize_count", int_t, 0, "", 9, 2, 20)
gen.add("keypoint_unmatched_count", int_t, 0, "", 6, 1, 20)
#
gen.add("plane_match_direction_threshold", double_t, 0, "In degree.", 30.0, 0.01, 60.0 )
gen.add("plane_match_distance_threshold", double_t, 0, "In meter.", 0.25, 0.01, 1.0 )
gen.add("plane_force_inlier_update", bool_t, 0, "", False)
gen.add("plane_match_check_overlap", bool_t, 0, "", True)
gen.add("plane_match_overlap_alpha", double_t, 0, "", 0.6, 0.005, 0.99 )
gen.add("plane_inlier_leaf_size",   double_t, 0, "", 0.1, 0.005, 0.5 )
gen.add("plane_hull_alpha", double_t, 0, "", 0.5, 0.01, 0.99)
##
gen.add("factors_previous_n_frames", int_t, 0, "", 1, 1, 10)
gen.add("refine_planar_map", bool_t, 0, "", True)
gen.add("merge_floor_plane", bool_t, 0, "", True)
gen.add("add_floor_constrain", bool_t, 0, "", True)
gen.add("planar_merge_direction_threshold", double_t, 0, "", 25.0, 0.01, 30)
gen.add("planar_merge_distance_threshold", double_t, 0, "", 0.25, 0.01, 1.0)
gen.add("planar_merge_overlap_alpha", double_t, 0, "", 0.33, 0.005, 0.99 )

##
gen.add("remove_plane_bad_inlier", bool_t, 0, "", True)
gen.add("planar_bad_inlier_alpha", double_t, 0, "", 0.5, 0.05, 0.99)
##
gen.add("map_full_leaf_size",   double_t, 0, "", 0.01, 0.001, 0.5 )
gen.add("map_full_remove_bad_inlier", bool_t, 0, "", False)
gen.add("map_full_min_neighbor",   int_t, 0, "", 20, 5, 200 )
gen.add("map_full_search_radius", double_t, 0, "", 0.05, 0.01, 0.5 )
gen.add("map_full_min_neighbor_alpha", double_t, 0, "", 0.15, 0.05, 0.9)
gen.add("construct_full_leaf_size",   double_t, 0, "", 0.02, 0.001, 0.5 )
gen.add("octomap_max_depth_range", double_t, 0, "", 4.0, 0.1, 50.0)
gen.add("octomap_resolution", double_t, 0, "", 0.05, 0.005, 0.5)
gen.add("publish_map_cloud", bool_t, 0, "", True )
gen.add("publish_octomap", bool_t, 0, "", False )
gen.add("publish_keypoint_cloud", bool_t, 0, "", True )
gen.add("publish_optimized_path", bool_t, 0, "", True )

exit(gen.generate(PACKAGE, "plane_slam", "GTMapping"))
